import numpy as np

from ..utils import distance_matrix, recall_at_k


def test_distance_matrix():
    x = np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                  [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]])

    d = distance_matrix(x, x)
    assert np.all(d == 0.0)


def test_recall_at_k_100():
    distances = np.array([[2.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 2.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 2.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 2.0, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 2.0, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 2.0, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 2.0, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 2.0, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 2.0, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 2.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0]])
    results = recall_at_k(distances)
    assert np.round(results[0]) == 100.0
    assert np.round(results[1]) == 100.0
    assert np.round(results[2]) == 100.0
    assert np.round(results[3]) == 100.0
    assert np.round(results[4]) == 100.0
    assert np.round(results[5]) == 100.0


def test_recall_at_k_50():
    distances = np.array([[0.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.0, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.0, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 2.0, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 2.0, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 2.0, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 2.0, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 2.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0]])
    results = recall_at_k(distances)
    assert np.round(results[0]) == 55.0
    assert np.round(results[1]) == 55.0
    assert np.round(results[2]) == 64.0
    assert np.round(results[3]) == 64.0
    assert np.round(results[4]) == 64.0
    assert np.round(results[5]) == 55.0


def test_recall_at_k_0():
    distances = np.array([[0.0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.0, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.0, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.0, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.0, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.0, 0.7, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.0, 0.8, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.0, 0.9, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.0, 1.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.0, 1.1],
                          [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.0]])
    results = recall_at_k(distances)
    assert np.round(results[0]) == 9.0
    assert np.round(results[1]) == 9.0
    assert np.round(results[2]) == 9.0
    assert np.round(results[3]) == 9.0
    assert np.round(results[4]) == 9.0
    assert np.round(results[5]) == 9.0
